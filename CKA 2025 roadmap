🎓 CKA Exam Pattern — 2024 / 2025
👉 CKA is a practical, hands-on exam — no multiple choice questions!
👉 You work on a live Kubernetes cluster.
👉 You must solve real-world problems using kubectl, YAML files, and other Kubernetes tools.
1 Exam Format:
Parameter	Value
Exam mode	Online, proctored
Exam duration	2 hours
Total questions	15-20 tasks
Passing score	66%
Exam environment	Linux terminal + Kubernetes cluster + documentation access

2. Allowed resources:
✅ You are allowed to access:
•	The official Kubernetes documentation → https://kubernetes.io/docs
•	You can open multiple doc pages in your browser.
•	No other tabs allowed (you’ll be monitored).
3.Question types:

✅ Create/modify Kubernetes objects:
•	Pods
•	Deployments
•	Services
•	ConfigMaps, Secrets
•	Network Policies
•	Persistent Volumes, Claims
✅ Troubleshooting:
•	Find broken resources
•	Fix them using kubectl or YAML manifest	
✅ Cluster management:
•	Manage control plane components
•	Create/upgrade clusters (kubeadm)
•	Manage certificates
✅ Security:
•	RBAC
•	Network Policies
✅ Logging & Monitoring:
•	View logs
•	Troubleshoot pods/nodes
✅ Scheduling:
•	Taints, tolerations
•	Node affinity
✅ Multi-container pods:
•	Sidecars, init containers
✅ Storage:
•	Persistent volumes
•	StatefulSets
✅ Networking:
•	Services
•	Ingress
⌛ 4 .Time Management Tips
✅ Some questions are worth more points than others → focus on high value questions first.
✅ You can flag questions and return to them.
✅ You can run kubectl freely and use YAML files in /tmp directory.

5. Scoring
•	Some tasks are auto-graded (if output matches expected result).
•	Some tasks are manually reviewed by graders.
•	Each question has a weight % → total score adds up to 100%.
✅ You must get 66% or more to pass.
6.Exam environment
✅ You get:
•	1 or more Kubernetes clusters
•	Each task specifies which cluster/context to use
•	kubectl pre-installed
•	Editor (vim/nano) pre-installed
✅ You can copy/paste YAML from docs, but you must modify it correctly.
Final Summary
✅ Practical exam — 100% hands-on
✅ Time: 2 hours
✅ 15–20 tasks → Creating, troubleshooting, configuring Kubernetes resources
✅ Passing: 66%
✅ Docs allowed: yes (https://kubernetes.io/docs)
Career Tip
👉 CKA is a highly respected cert for:
•	Kubernetes Admins
•	Platform Engineers
•	DevOps Engineers
•	Cloud Engineers
👉 Many employers now require or strongly prefer CKA for Kubernetes-focused roles!
________________________________________

Next options for you:
✅ Full CKA Syllabus & Breakdown
✅ Top CKA Practice Labs (very useful)
✅ CKA Exam Tips & Tricks
✅ CKA 30-day Study Plan
✅ CKA Interview Q&A sheet

--------------------
🎓 CKA Syllabus (Latest - 2024/2025)
1️⃣ Cluster Architecture, Installation & Configuration (10%)
✅ Install Kubernetes using kubeadm
✅ Configure certificates
✅ Manage kubeconfig
✅ Understand systemd services for control plane and worker nodes
✅ Upgrade a Kubernetes cluster
✅ Backup and restore etcd

Practice Labs:
--------------
Deploy a cluster using kubeadm
Backup and restore etcd
Configure kubeconfig for multiple users
Perform a minor version upgrade of Kubernetes cluster

2️⃣ Workloads & Scheduling (15%)
✅ Deployments — create, update, rollback
✅ ConfigMaps and Secrets
✅ Multi-container Pods (init containers, sidecars)
✅ Probes: readiness/liveness
✅ Pod scheduling — taints, tolerations, affinity, anti-affinity
✅ DaemonSets
✅ Static Pods
✅ Manually scheduled Pods

Practice Labs:
-------------
Create multi-container Pods with init/sidecars
Add probes to an existing Deployment
Deploy a DaemonSet and verify its behavior
Create a Pod with node affinity
Create a Static Pod

3️⃣ Services & Networking (20%)
✅ Cluster Networking basics
✅ Services: ClusterIP, NodePort, LoadBalancer
✅ Ingress Controller & Ingress Resources
✅ CoreDNS configuration
✅ Network Policies

Practice Labs:
-------------
Deploy an Ingress Controller + create Ingress Resource
Create NetworkPolicies to restrict traffic
Configure a CoreDNS ConfigMap
Deploy and expose a simple app using all 3 service types
Troubleshoot Service networking issues

4️⃣ Storage (10%)
✅ PersistentVolumes (PV) & PersistentVolumeClaims (PVC)
✅ StorageClasses
✅ Dynamic provisioning
✅ Volume modes: block, filesystem
✅ StatefulSets with persistent storage

Practice Labs:
-------------
Create and test PVC & PV
Configure StorageClass & test dynamic provisioning
Deploy a StatefulSet with persistent volume
Resize Persistent Volume (if storage backend supports it)

5️⃣ Troubleshooting (30%) → Most Important Section
✅ Troubleshoot application failures
✅ Troubleshoot cluster component failures
✅ Troubleshoot networking issues
✅ Analyze pod & node logs
✅ Resource usage monitoring
✅ Identify issues causing Pods to remain Pending or CrashLoopBackOff
✅ Identify network connectivity issues
✅ Troubleshoot node status (NodeNotReady, cordoned, tainted, etc.)

Practice Labs:
--------------
Fix Pods in CrashLoopBackOff
Fix Pods stuck in Pending
Debug control plane component failures
Analyze pod logs and events
Use kubectl top to monitor resource usage
Diagnose network issues between Pods/Services

6️⃣ Cluster Maintenance (10%)
✅ OS upgrade & Kubernetes version upgrade
✅ Cordon/uncordon/drain nodes
✅ Backup and restore cluster data (etcd)
✅ Manage certificates expiration
✅ Manage cluster nodes

Practice Labs:
-------------
Cordon/drain a node for maintenance
Upgrade Kubernetes using kubeadm upgrade
Rotate TLS certificates
Add/remove nodes to/from the cluster

------------------------------------------------------------------
🚀 Summary Table (Focus Areas by Weight):
-----------------------------------------------------------------
| Section                              | Weight (%) | Focus Level   |
| ------------------------------------ | ---------- | ------------- |
| Cluster Architecture & Configuration | 10%        | Medium        |
| Workloads & Scheduling               | 15%        | High          |
| Services & Networking                | 20%        | Very High     |
| Storage                              | 10%        | High          |
| Troubleshooting                      | 30%        | **Very High** |
| Cluster Maintenance                  | 10%        | Medium        |

🚀 Top CKA Practice Labs (Highly Recommended)
✅ killer.sh CKA Simulator → closest to real exam
✅ KodeKloud CKA Labs → Excellent interactive labs
✅ Civo Academy CKA free course → https://academy.civo.com/cka
✅ Play with Kubernetes → https://labs.play-with-k8s.com
✅ Katacoda Kubernetes scenarios → https://katacoda.com/courses/kubernetes (some modules still work)

🚀 CKA Success Tips:
✅ Do NOT memorize → Practice hands-on
✅ Use official docs → https://kubernetes.io/docs
✅ Master kubectl → be FAST and efficient
✅ Practice Troubleshooting a LOT → 30% weight!
✅ Practice YAML authoring → no copy-paste blindly
✅ Stay calm — exam is time-pressured, but manageable with practice


🚀 CKA Exam Day Cheat Sheet:

kubectl basics:
--------------
kubectl get pods -n <namespace>
kubectl describe pod <pod-name> -n <namespace>
kubectl logs <pod-name> -n <namespace>
kubectl exec -it <pod-name> -- /bin/sh
kubectl apply -f <file.yaml>
kubectl delete -f <file.yaml>
kubectl edit pod <pod-name>
kubectl top node
kubectl top pod --all-namespaces

📝 Common YAML:
---------------
Pod:
----
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mycontainer
    image: nginx

-----------
Deployment:
----------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydeployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: mycontainer
        image: nginx

----------
Service:
---------
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: NodePort

--------------
Ingress (basic):
--------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myingress
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myservice
            port:
              number: 80
------------------
⚙️ Node Management:
------------------
kubectl cordon <node-name>
kubectl drain <node-name> --ignore-daemonsets
kubectl uncordon <node-name>
---------
🔒 RBAC:
---------
RoleBinding:
-----------
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: jane
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io

----------------------
Final Tips 🚀
-----------
✅ Practice with kubectl until it is second nature
✅ Learn how to find YAML examples fast in Kubernetes docs
✅ Don’t get stuck — flag tough questions and return later
✅ Use /tmp directory for YAML editing during exam
✅ Save your YAML often (kubectl apply -f /tmp/my.yaml)
✅ Troubleshooting section carries highest weight → practice more
-------------------------------
